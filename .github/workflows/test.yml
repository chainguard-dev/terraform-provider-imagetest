# Terraform Provider testing workflow.
name: Tests

# This GitHub action runs your tests for each pull request and push.
# Optionally, you can turn it on using a schedule for regular testing.
on:
  pull_request:
    paths-ignore:
      - "README.md"
  push:
    paths-ignore:
      - "README.md"

permissions: {}

jobs:
  # Ensure project builds before running testing matrix
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5

    # Testing only needs permissions to read the repository contents.
    permissions:
      contents: read

    outputs:
      entrypoint_ref: ${{ steps.entrypoint-build.outputs.entrypoint_ref }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: "go.mod"
          check-latest: true
          cache: true

      - run: go mod download

      - run: go build -v .

      - name: Run linters
        uses: golangci/golangci-lint-action@1481404843c368bc19ca9406f87d6e0fc97bdcfd # v7.0.0
        with:
          version: latest

      - uses: ko-build/setup-ko@d006021bd0c28d1ce33a07e7943d48b079944c8d # v0.9
        env:
          KO_DOCKER_REPO: "ttl.sh/imagetest" # Avoid using GH registry for presubmit and plumbing auth

      - id: entrypoint-build
        run: |
          ref=$(ko build --base-import-paths ./cmd/entrypoint)
          echo "entrypoint_ref=${ref}" >> $GITHUB_OUTPUT

  generate:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: "go.mod"
          check-latest: true
          cache: true

      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: "1.10.*"
          terraform_wrapper: false

      - run: go generate ./...

      - name: git diff
        run: |
          git diff --compact-summary --exit-code || \
            (echo; echo "Unexpected difference in directories after code generation. Run 'go generate ./...' command and commit."; exit 1)

  # Run acceptance tests in a matrix with Terraform CLI versions
  test:
    name: Terraform Provider Acceptance Tests
    needs: build

    runs-on: ubuntu-latest

    timeout-minutes: 15

    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - "1.10.*"
          - "1.11.*"

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: "go.mod"
          check-latest: true
          cache: true

      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: configure docker daemon
        run: |
          # Use a larger cidr range with a smaller subnet mask to avoid ip
          # exhaustion when creating harness networks
          if [ ! -f /etc/docker/daemon.json ]; then
            echo '{}' | sudo tee /etc/docker/daemon.json
          fi
          cat /etc/docker/daemon.json | jq '. | .+{"default-address-pools": [{"base":"10.0.0.0/8","size":24}]}' | sudo tee /etc/docker/daemon.json
          cat /etc/docker/daemon.json
          sudo systemctl restart docker

      - run: go mod download

      - run: go test -v -cover ./internal/provider/
        timeout-minutes: 10
        env:
          TF_ACC: "1"
          TF_LOG: "info"
          IMAGETEST_ENTRYPOINT_REF: ${{ needs.build.outputs.entrypoint_ref }}

  images-test:
    name: Run imagetest against images
    needs: build

    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        # Pick small, reliable image tests that hit the various harnesses. Run
        # these in shards because we're using undersized runners compared to
        # upstream and will easily hit disk pressure.
        images:
          - calico
          - cilium
          - jre
          - maven
          - tomcat
          - busybox

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: "go.mod"
          check-latest: true
          cache: true

      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: "1.10.*"
          terraform_wrapper: false

      - name: Build the provider
        run: |
          go install .

      - name: Clone the public images repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: chainguard-images/images
          path: images

      - name: Build images
        working-directory: images
        env:
          TF_VAR_target_repository: "ttl.sh/imagetest"
          IMAGETEST_ENTRYPOINT_REF: ${{ needs.build.outputs.entrypoint_ref }}
        run: |
          make init-upgrade

          # Use the local provider
          cat <<EOF > $HOME/.terraformrc
          provider_installation {
            dev_overrides {
              "registry.terraform.io/chainguard-dev/imagetest" = "$HOME/go/bin/"
            }
          }
          direct {}
          EOF

          cat <<EOF > main_override.tf
          provider "imagetest" { repo = var.target_repository }
          EOF

          terraform apply -target='module.${{ matrix.images }}' -auto-approve --parallelism=$(nproc)
