// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
)

const addFeature = `-- name: AddFeature :exec
INSERT INTO features (id, harness_id, inventory_id, labels) VALUES (?, ?, ?, ?)
ON CONFLICT(id, harness_id, inventory_id) DO NOTHING
`

type AddFeatureParams struct {
	ID          string      `json:"id"`
	HarnessID   string      `json:"harness_id"`
	InventoryID string      `json:"inventory_id"`
	Labels      interface{} `json:"labels"`
}

// Add a new feature
func (q *Queries) AddFeature(ctx context.Context, arg AddFeatureParams) error {
	_, err := q.db.ExecContext(ctx, addFeature,
		arg.ID,
		arg.HarnessID,
		arg.InventoryID,
		arg.Labels,
	)
	return err
}

const addHarness = `-- name: AddHarness :exec
INSERT INTO harnesses (id, inventory_id) VALUES (?, ?)
ON CONFLICT(id, inventory_id) DO NOTHING
`

type AddHarnessParams struct {
	ID          string `json:"id"`
	InventoryID string `json:"inventory_id"`
}

// Add a new harness
func (q *Queries) AddHarness(ctx context.Context, arg AddHarnessParams) error {
	_, err := q.db.ExecContext(ctx, addHarness, arg.ID, arg.InventoryID)
	return err
}

const addInventory = `-- name: AddInventory :exec
INSERT INTO inventories (id) VALUES (?)
ON CONFLICT(id) DO NOTHING
`

// Add a new inventory
func (q *Queries) AddInventory(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, addInventory, id)
	return err
}

const listFeatures = `-- name: ListFeatures :many
SELECT id, harness_id, inventory_id, labels
FROM features
WHERE harness_id = ? AND inventory_id = ?
`

type ListFeaturesParams struct {
	HarnessID   string `json:"harness_id"`
	InventoryID string `json:"inventory_id"`
}

// List all features for a given harness
func (q *Queries) ListFeatures(ctx context.Context, arg ListFeaturesParams) ([]Feature, error) {
	rows, err := q.db.QueryContext(ctx, listFeatures, arg.HarnessID, arg.InventoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feature
	for rows.Next() {
		var i Feature
		if err := rows.Scan(
			&i.ID,
			&i.HarnessID,
			&i.InventoryID,
			&i.Labels,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFeature = `-- name: RemoveFeature :exec
DELETE FROM features
WHERE id = ? AND harness_id = ? AND inventory_id = ?
`

type RemoveFeatureParams struct {
	ID          string `json:"id"`
	HarnessID   string `json:"harness_id"`
	InventoryID string `json:"inventory_id"`
}

// Remove a feature
func (q *Queries) RemoveFeature(ctx context.Context, arg RemoveFeatureParams) error {
	_, err := q.db.ExecContext(ctx, removeFeature, arg.ID, arg.HarnessID, arg.InventoryID)
	return err
}

const removeHarness = `-- name: RemoveHarness :exec
DELETE FROM harnesses
WHERE id = ? AND inventory_id = ?
`

type RemoveHarnessParams struct {
	ID          string `json:"id"`
	InventoryID string `json:"inventory_id"`
}

// Remove a harness
func (q *Queries) RemoveHarness(ctx context.Context, arg RemoveHarnessParams) error {
	_, err := q.db.ExecContext(ctx, removeHarness, arg.ID, arg.InventoryID)
	return err
}

const removeInventory = `-- name: RemoveInventory :exec
DELETE FROM inventories WHERE id = ?
`

// Remove an inventory
func (q *Queries) RemoveInventory(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, removeInventory, id)
	return err
}
